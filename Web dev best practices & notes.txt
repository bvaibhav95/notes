HTTP caching
https://codeburst.io/demystifying-http-caching-7457c1e4eded

URL params vs Query strings...when to use what as per standards
https://coursework.vschool.io/express-params-and-query/

Best practices
https://nodewebapps.com/2017/01/03/13-security-best-practices-for-your-web-application/

SOAP vs REST API
https://dzone.com/articles/difference-between-rest-and-soap-api

API gateway
https://medium.com/@gabrymartinez/stupid-question-of-the-day-what-is-an-api-gateway-and-what-it-has-to-do-with-a-serverless-model-2acee3e3eeba

What are Microservices ?
https://www.youtube.com/watch?v=gfWr2_H39N0

Serverless
https://www.youtube.com/watch?v=6wDQqWRh2uI
https://serverless.com/framework/

Client side vs Server side rendering
https://medium.freecodecamp.org/what-exactly-is-client-side-rendering-and-hows-it-different-from-server-side-rendering-bd5c786b340d

Best place to learn about Node web techniques 
nodewebapps.com

JWT (RFC 7519) is a standard. passport.js is an implementation that uses JWT. It is not necessary to use passportjs with JWT
https://scotch.io/@devGson/api-authentication-with-json-web-tokensjwt-and-passport

Standards of JSON API formats (Ex. standard for JSON API response format)
1.https://jsonapi.org
2.https://medium.com/@bojanmajed/standard-json-api-response-format-c6c1aabcaa6d
3.https://medium.com/@shazow/how-i-design-json-api-responses-71900f00f2db
--------------------------------------------------------------------------------------------------------------------
HTML5 Application Cache
HTML5 provides Application Cache (AppCache), which means that a web application is cached, and accessible without an internet connection. The new HTML5 specification allows browsers to prefetch some or all of a website assets such as HTML files, images, CSS, JavaScript, etc, while the client is connected. It is not necessary for the user to have accessed this content previously, for fetching this content. In other words, application cache can prefetch pages that have not been visited at all and are thereby unavailable in the regular browser cache. Prefetching files can speed up the site's performance, though you are of course using bandwidth to download those files initially.

Application cache gives an application three advantages:

Offline browsing - users can use the application when they're offline
Speed - cached resources load faster
Reduced server load - browser will only download updated/changed resources from the server
Browser Cache
Internet browsers use caching to store HTML web pages by storing a copy of visited pages and then using that copy to render when you re-visit that page. If the date on the page is the same date as the previously stored copy, then the computer uses the one on your hard drive rather than re-downloading it from the internet.

Difference
AppCache is specifically designed to allow web apps (and web sites) to be made available offline, though the same speed benefits which the normal browser cache provides, when the user is online, are also provided by AppCache.

The key difference with the browser cache is that you can specify all the assets the browser should cache in a manifest file (conceivably your entire site) whereas the browser cache will only store the pages (and associated assets) you have actually visited.
--------------------------------------------------------------------------------------------------------------------
1. Static site generator (jekyll, Gatsby)
2. css-modules
3. Hosting frontend & backend separately
4. proxy/reverse proxy
5. webserver vs app server(node)
6. API gateway
7. CDN
8. Microservices vs monolithic architecture
9. PWA
10. GraphQL
11. Serverless
13. Cookies vs localStorage vs sessionStorage. (Find use cases)
14. Session storages method(client vs server)
15. Client side vs server side routing
16. PM2 & forever
17. CommonJS
18. Session mechanisms/session hijacking
19. HTTP caching

