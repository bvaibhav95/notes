languages like javascript, jscript, actionscript follow ECMAScript standards & specifications
ES5 = ES2009
ES6 = ES2015
Lexical(local) scoping => scopes in block
Ex. {
    var x = 10
}
above var x has scope between {}

const can be changed if scope is changes
Ex. 
`
const pi = 3.142
pi = 10 //not possible
const pi = 10 //not possible
func = function(){
    const pi = 10 //possible
}
`

ES6 Features
1. let 7 const keyword
2. default params
function func(num=10){

}
3. Spread operator
var a1 = [1,2,3]
var a2 = [a1,4,5,6]
a2 ==> [[1,2,3],4,5,6]

var a3 = [...a1,4,5,6] ==> a3 = [1,2,3,4,5,6]
4.Template Strings - looks elegant
`abc dtrct ${<your_variable/expression>}`
5.New String methods were introduced 
Ex. repeat, startsWith, endsWith, includes, etc
6.Object literal improvements
var ninja = {            var ninja = {
    name : name              name,
    belt : belt   -->        belt
}                        }
7.Fat arrow functions ==> allows to bind "this" lexically
a.bind this 
var obj = {
    name : "abc",
    func(){
        window.setInterval(function(){
            console.log(this.name)      ----> won't log anything coz "this" refers to function passed to window.setInterval
        }, 1000)
    }
}

above prob can be solved by 
var obj = {
    name : "abc",
    func(){
        var _this = this;
        window.setInterval(function(){
            console.log(_this.name)      ----> now its referring to the "obj" & will log "abc"
        }, 1000)
    }
}

BUT INSTEAD OF ABOVE USE FAT ARROW function
var obj = {
    name : "abc",
    func(){
        var _this = this;
        window.setInterval(() => {
            console.log(this.name)      ----> now its referring to the "obj" & will log "abc" only
        }, 1000)
    }
}

8.Sets - new Data structure to store unique values
var s = new Set()
9.Generators - func that can be play & pause by us
function* generator(){
    //definition of generator
}
as this returns an "iterator"...can be used to loop through

###Javascript executes from left to right...explained as follows###
Ex. yield console.log(x);  -> it will console.log and then yield will execute which stops the execution of generator

10. static keyword for class...no need to instanciate where we need object creation in order to call other methods
class User{
    constructor(name){
        this.name = name
    }

    static noOfUsers(){
        console.log("Returning users");
    }
}

User.noOfUsers()

11. extends keyword

class Member extends User{
    constructor(name, type){
        super(name);
        this.type = type;
    }
}

12. Map - new data structure, key-value based structure

Map {"key1" => "value1", "key2" => "value2"}

13. Promises --> Replacement for callbacks

There are 7 data types in javascript

Cloning vs Deep cloning of objects (use lodash methods for deep cloning)

Garbage collection javascript
Memory management in JavaScript is performed automatically and invisibly to us
setting object = null...free ups the memory
https://javascript.info/garbage-collection
Symbol is a primitive type for unique identifiers.
Symbols are created with Symbol() call with an optional description.

Arrow functions have no “this”
Arrow functions are special: they don’t have their “own” this. If we reference this from such a function, it’s taken from the outer “normal” function

The special primitives null and undefined are exceptions and have no methods

JSON.stringify to convert objects into JSON.
JSON.parse to convert JSON back into an object
JSON.stringify can be applied to primitives as well
// a number in JSON is just a number
alert( JSON.stringify(1) ) // 1
// a string in JSON is still a string, but double-quoted
alert( JSON.stringify('test') ) // "test"
alert( JSON.stringify(true) ); // true
alert( JSON.stringify([1, 2, 3]) ); // [1,2,3]

JSON is data-only cross-language specification, so some JavaScript-specific object properties are skipped by JSON.stringify
let user = {
  sayHi() { // ignored
    alert("Hello");
  },
  [Symbol("id")]: 123, // ignored
  something: undefined // ignored
};
alert( JSON.stringify(user) ); // {} (empty object)

=====Custom “toJSON”======
Like toString for string conversion, an object may provide method toJSON for to-JSON conversion. JSON.stringify automatically calls it if available.

>>>Creating object
    var myCar = new Object();
    myCar.speed = 50;
    myCar.color = "red";
    myCar.drive = function(){
      console.log("Now driving...");
    }
    
    =====OR JSON formatted=====
    
    var myCar = {
      speed : 50;
      color : "red";
      drive : function(){
        console.log("Now driving...");
      } 
    }
    
    
    =====OR Factory pattern=====
    
    var Car = function(speed, color){
    	var temp = {};
	temp.speed = speed;
	temp.color = color;
	
	return temp;
    }
    
    var myCar = Car(50, "red");
    
    =====OR (prototype pattern)=====
    var Car = function(){};
    Car.prototype.speed = 0;
    Car.prototype.color = "blank";
    Car.prototype.drive = function(){
    	console.log("Now driving...");
    };
    
    var myCar = new Car();
    myCar.speed = 50;
    myCar.color = "red";
    
    
>>>Creating constructor
var Car = function(speed, color){
	this.speed = speed;
	this.color = color;
	this.drive = function(){
		console.log("Now driving...");
	}
}

var myCar = new Car(50, "white");
>>>Javascript has no formal support for class creation
   In javascript every function exp is a constructor.
   
>>>Javascript is single threaded...i.e.only one script can run at a time.
AJAX is non-blocking...it's not multi-threading

>>>Closures & Promises in javascript...

Promises are wrappers around async functions
Ex. let p = new Promise((resolve, reject) => {
	setTimeout(function(){
		resolve("resolved");
	}, 1000)
});


callback hell = terminology used
concurrency - multiple tasks running at same time

Synchronous vs Asynchronous 
Languages like ruby, python, etc handles things synchrounously and that's why they are multi threaded otherwise if single threaded that single thread would be blocked i.e each thread work synchronously.
In Javascript, single threaded does thing asynchrounously
